import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.scene.layout.Background;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import javafx.geometry.Pos;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Random;

public class Game extends Application {
   
   private Stage primaryStage;
   private Scene cipherScene;
   private TextField decipherBox;
   private Scene menuScene;
   private Scene displayScene;
   private Scene transitionScene;
   private Scene endingScene;
   private VBox root = new VBox(10);
   
   //private Story story; pls make story class

   public static void main(String[] args) {
      launch(args);
   }

   @Override
   public void start(Stage primaryStage) throws FileNotFoundException {
      this.primaryStage = primaryStage;
      //this.story = new Story(); pls make ^
   
      createCipherScene();
      //createMenuScene();
      //createDisplayScene();
      //createTransitionScene();
      //createEndingScene();
      
            
      Image icon = new Image(new FileInputStream("icon.png"));
      primaryStage.getIcons().add(icon);
      primaryStage.setScene(cipherScene);
      primaryStage.setTitle("A Squire's Destiny");
      primaryStage.centerOnScreen();
      primaryStage.show();
   }

   private void createCipherScene() {
      // Cipher scene creation
      Ciphers cipherClass = new Ciphers(); // create Ciphers class instance
      
      Text dcText = new Text(); // create instruction text
      dcText.setText("Decode To Play: ");
      dcText.setFill(Color.WHITE);
      
      Text cipherText = new Text(); // create cipher
      String cipherString = cipherClass.getCipher();
      String cipherHint = cipherClass.getHint();
      cipherText.setFill(Color.RED); cipherText.setStroke(Color.WHITE);
      cipherText.setTextAlignment(TextAlignment.CENTER);
      cipherText.setText(cipherString + "\n\nHint: " + cipherHint);
      
      decipherBox = new TextField(); // create input field
      decipherBox.setAlignment(Pos.CENTER); decipherBox.setMaxWidth(400);
      decipherBox.setPromptText("Enter code");
      
      Button confirmEntry = new Button(); // create confirm button
      confirmEntry.setText("Enter");
      confirmEntry.setOnAction(event -> {
         boolean check = cipherClass.solutionCheck(decipherBox.getText().toString(), cipherString);
         if (check == true) createMenuScene();
         else if (check == false) dcText.setText("WRONG. Try again.");
         else System.exit(0);
      });
           
      root.getChildren().addAll(dcText, cipherText, decipherBox, confirmEntry);
      root.setAlignment(Pos.CENTER);
      root.setBackground(Background.EMPTY);
      cipherScene = new Scene(root, 1000, 600, Color.BLACK);
   }

   private void createMenuScene(){
      // Implement menu scene creation
      try {
        root.getChildren().clear(); // clear root nodes
        Image mn = new Image(new FileInputStream("menu.png"));
        ImageView menu = new ImageView();
        menu.setImage(mn); 
        root.getChildren().addAll(menu);
        menuScene = new Scene(root, 1000, 600);
        primaryStage.setScene(menuScene);
        primaryStage.show();
    } catch (FileNotFoundException e) {
        e.printStackTrace(); // Handle the exception as per your application's requirement
    }
      
   }

   private void createDisplayScene() {
      // Implement display scene creation
   }

   private void createTransitionScene() {
      // Implement transition scene creation
   }

   private void createEndingScene() {
      // Implement ending scene creation
   }

   // Other methods for handling scene transitions and user choices
}
